{"name":"Http-parser.d","tagline":"joyent/http-parser in D","body":"http-parser.D\r\n===\r\n\r\nhttp-parser.D = [joyent/http-parser](https://github.com/joyent/http-parser/) in D programming language.\r\n\r\n## Usage\r\n\r\n\timport std.stdio;\r\n\timport http.parser.core;\r\n\t...\r\n\tauto parser = new HttpParser();\r\n\tparser.onMessageBegin = (parser) {\r\n\t\twriteln(\"Message has just begun\");\r\n\t};\r\n\tparser.onMessageComplete = (parser) {\r\n\t\twriteln(\"Message has been completed\");\r\n\t};\r\n\tparser.onUrl = (parser, string data) {\r\n\t\twriteln(\"Url of HTTP message is: \", data);\r\n\t};\r\n\tparser.onStatusComplete = (parser) {\r\n\t\twriteln(\"HTTP status is complete\");\r\n        // if parsing request, this is a good spot to query for:\r\n        if(parser.type == HttpParserType.REQUEST) {\r\n            string method = parser.method; // GET\r\n            writeln(\"Method: \", method);\r\n        }\r\n        auto version = parser.protocolVersion.toString; // 1.1\r\n\t};\r\n\tparser.onHeader = (parser, HttpHeader header) {\r\n\t\twriteln(\"Parser Header '\", header.name, \"' with value '\", header.value, \"'\");\r\n\t};\r\n\tparser.onBody = (parser, HttpBodyChunk chunk) {\r\n        string isFinal = chunk.isFinal ? \"final\" : \"not final\" ;\r\n\t\twriteln(std.string.format(\"A chunk of the HTTP body has been processed: %s (%s) \", chunk.buffer, isFinal));\r\n\t};\r\n\tparser.execute(\"GET / HTTP 1.1\\r\");\r\n\tparser.execute(\"\\n\");\r\n\tparser.execute(\"FirstHeader: ValueOfFirst Header\\r\\n\");\r\n\tparser.execute(\"Content-Length: 3\\r\\n\");\r\n\tparser.execute(\"\\r\\n\");\r\n\tubyte[] bodyChunk = [1u,2u,3u];\r\n\tparser.execute(bodyChunk);\r\n\r\n\r\nOutput:\r\n\r\n\r\n\tMessage has just begun\r\n\tUrl of HTTP message is: /\r\n\tParser Header 'FirstHeader' with value 'ValueOfFirst Header'\r\n\tParser Header 'Content-Length' with value '3'\r\n\tA chunk of the HTTP bady has been processed: [1, 2, 3] (is final)\r\n\tMessage has been completed\r\n\r\n## Uri\r\n\r\nUri parsing is provided by the class `http.parser.Uri`.\r\n\r\n```D\r\nimport http.parser : Uri;\r\n\r\n//...\r\n\r\nUri uri = new Uri(\"http://user1:password1@google.com:9000/myResource?indent=1#page_2\");\r\nstring schema = uri.schema; // -> \"http\"\r\nstring credentials = uri.userInfo; // -> \"user1:password1\"\r\nstring host = uri.host; // -> \"google.com\"\r\nushort port = uri.port; // -> 9000\r\nstring path = uri.path; // -> \"/myResource\"\r\nstring query = uri.query; // -> \"ident=1\"\r\nstring fragment = uri.fragment; // -> \"page_2\"\r\n\r\n```\r\n\r\n## Body Transmission Modes\r\n\r\nOnce the headers were parsed, `HttpParser.transmissionMode` can be used to determinate how the body of the message will be transmitted. The values are and will be detected in the following order:\r\n\r\n* HttpBodyTransmissionMode.Chunked: `Transfer-Encoding` header was found in the request.\r\n* HttpBodyTransmissionMode.ContentLength: `Content-Length` > 0 header was found in the request.\r\n* HttpBodyTransmissionModel.None: No entity expected in the incoming HTTP message.\r\n\r\n## Building\r\n\r\n    git clone https://github.com/bithavoc/http-parser.d.git\r\n\tgit submodule update --init\r\n\tmake\r\n\r\nAn archive will be generated in `out/http-parser.a` containing joyent/http-parser objects and the http-parser.d object itself.\r\n\r\n## Examples\r\n\r\nUse `make examples` to compile all the examples. Executables will be generated in `out/examples`.\r\n\r\n\r\n## Test\r\n\r\n\r\n\tmake test\r\n\r\n\r\n## License (MIT)\r\n\r\nCopyright (c) 2012, 2014 Bithavoc - http://bithavoc.io\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-54890957-1","note":"Don't delete this file! It's used internally to help with page regeneration."}